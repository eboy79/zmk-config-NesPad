#include <behaviors.dtsi>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/rgb.h>
#include <dt-bindings/zmk/pointing.h>
#include <input/processors.dtsi>

#define default_layer 0
#define game_layer 1
#define bt_layer 2
#define mouse_layer 3
#define bl_layer 4
#define media_layer 5
#define system_layer 6
#define functions_layer 7

#define ALLLAYERS  default_layer   game_layer   bt_layer   mouse_layer   bl_layer   media_layer   system_layer  functions_layer


#define ZMK_MOUSE_DEFAULT_MOVE_VAL 1500  // 600
#define ZMK_MOUSE_DEFAULT_SCRL_VAL 20    // 10

&mmv {
  acceleration-exponent = <2>;      // 1
  time-to-max-speed-ms = <600>;     // 300
  delay-ms = <16>;                   // 0
};

&msc {
  acceleration-exponent = <1>;      // 0
  time-to-max-speed-ms = <100>;     // 300
  delay-ms = <0>;                   // 0
};
&mmv_input_listener {
    set_mouse_fast {
        layers = <mouse_layer>;
        input-processors = <&zip_xy_scaler 2 1>;
    };
};
/ {
    macros {
        macro_to_d_layer: macro_to_d_layer {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&to 0>, <&rgb_ug RGB_COLOR_HSB(0, 100, 50)>;
        };
        macro_to_g_layer: macro_to_g_layer {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&to 1>, <&rgb_ug RGB_COLOR_HSB(75, 100, 50)>;
        };
        macro_to_bt_layer: macro_to_bt_layer {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&to 2>, <&rgb_ug RGB_COLOR_HSB(175, 100, 50)>;
        };
        macro_to_mouse_layer: macro_to_mouse_layer {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&to 3>, <&rgb_ug RGB_COLOR_HSB(220, 100, 50)>;
        };
        macro_to_bl_layer: macro_to_bl_layer {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&to 4>, <&rgb_ug RGB_COLOR_HSB(290, 100, 50)>;
        };
        macro_to_m_layer: macro_to_m_layer {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&to 5>, <&rgb_ug RGB_COLOR_HSB(245, 100, 50)>;
        };
        macro_to_sys_layer: macro_to_sys_layer {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&to 6>, <&rgb_ug RGB_COLOR_HSB(265, 100, 50)>;
        };
        macro_to_fun_layer: macro_to_fun_layer {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&to 7>, <&rgb_ug RGB_COLOR_HSB(45, 100, 50)>;
        };
    };
};

#define COMBO(NAME, BINDINGS, KEYPOS, LAYERS) \
  combo_##NAME { \
    timeout-ms = <50>; \
    bindings = <BINDINGS>; \
    key-positions = <KEYPOS>; \
    layers = <LAYERS>; \
   };

/ {
    combos {
        compatible = "zmk,combos";
        COMBO(todefault,  &to 0, 4 5, ALLLAYERS)
        COMBO(togrgb,  &rgb_ug RGB_TOG, 4 7, ALLLAYERS)
         COMBO(macsleep,  &kp C_SLEEP, 4 6, ALLLAYERS)
    };

    keymap {
        compatible = "zmk,keymap";
        default_layer {
            bindings = <
                &macro_to_g_layer   &macro_to_mouse_layer   &macro_to_bl_layer   &macro_to_bt_layer
                &macro_to_m_layer   &rgb_ug RGB_TOG   &macro_to_fun_layer  &macro_to_sys_layer
            >;
        };
        game_layer {
            bindings = <
                &kp UP   &kp DOWN   &kp LEFT   &kp RIGHT
                &kp X   &kp Y   &kp B   &kp A
            >;
        };
        bt_layer {
            bindings = <
                &bt BT_CLR_ALL  // Clear all Bluetooth bonds
                &bt BT_SEL 0    // Select Bluetooth profile 0
                &bt BT_SEL 1    // Select Bluetooth profile 1
                &bt BT_SEL 2    // Select Bluetooth profile 2
                &bt BT_CLR    // Select Bluetooth clear
                &macro_to_d_layer     // Select Bluetooth profile 4
                &bt BT_NXT           // Return to Default Layer
                &bt BT_PRV           // No function assigned
            >;
        };
        mouse_layer {
            bindings = <
                &mmv MOVE_UP 
                &mmv MOVE_DOWN  
                &mmv MOVE_LEFT  
                &mmv MOVE_RIGHT   
                &msc SCRL_UP
                &msc SCRL_DOWN
                &mkp LCLK           
                &mkp RCLK           
            >;
        };
        bl_layer {
            bindings = <
                &rgb_ug RGB_HUI 
                &rgb_ug RGB_HUD 
                &rgb_ug RGB_BRI 
                &rgb_ug RGB_BRD   
                &rgb_ug RGB_EFF
                &rgb_ug RGB_TOG
                &rgb_ug RGB_SPI         
                &rgb_ug RGB_SPD           
            >;
        };
        media_layer {
            bindings = <
                &kp C_VOL_UP 
                &kp C_VOL_DN
                &kp C_BRI_DN
                &kp C_BRI_UP
                &kp C_MUTE 
                &kp C_RW   
                &kp C_FF
                &kp C_PLAY          
            >;
        };
        system_layer {
            bindings = <
                &kp C_VOL_UP 
                &kp C_VOL_DN
                &kp C_BRI_DN
                &kp C_BRI_UP
                &kp C_MUTE 
                &kp C_RW   
                &kp C_FF
                &kp C_PLAY          
            >;
        };
        functions_layer {
            bindings = <
                &macro_to_g_layer   &macro_to_mouse_layer   &macro_to_bl_layer   &macro_to_bt_layer
                &macro_to_m_layer   &rgb_ug RGB_TOG   &kp X  &macro_to_sys_layer
            >;
        };
    };
};